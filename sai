<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Sports Talent Assessment App</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://unpkg.com/react@17/umd/react.development.js"></script>
  <script src="https://unpkg.com/react-dom@17/umd/react-dom.development.js"></script>
  <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
  <script src="https://www.gstatic.com/firebasejs/9.6.1/firebase-app-compat.js"></script>
  <script src="https://www.gstatic.com/firebasejs/9.6.1/firebase-firestore-compat.js"></script>
  <script src="https://www.gstatic.com/firebasejs/9.6.1/firebase-auth-compat.js"></script>
  <style>
    /* Hide scrollbar for a cleaner look */
    .no-scrollbar::-webkit-scrollbar {
        display: none;
    }
    .no-scrollbar {
        -ms-overflow-style: none; /* IE and Edge */
        scrollbar-width: none; /* Firefox */
    }
  </style>
</head>
<body>

  <div id="root"></div>

  <script type="text/babel">
    const { useState, useEffect } = React;

    const FONT_CLASS = "font-sans";

    const tests = [
      { id: "verticalJump", name: "Vertical Jump", description: "Measure your explosive leg power" },
      { id: "shuttleRun", name: "Shuttle Run", description: "Test your speed and agility" },
      { id: "sitUps", name: "Sit-ups", description: "Assess your core endurance" },
      { id: "enduranceRun", name: "Endurance Run", description: "Evaluate your cardiovascular fitness" },
    ];

    const sportTypes = [
      { id: "basketball", name: "Basketball", description: "Assess core basketball skills." },
      { id: "football", name: "Football", description: "Evaluate fundamental football techniques." },
    ];

    const sportQualities = {
      basketball: [
        { id: "dribbling", name: "Dribbling", description: "Control the ball while in motion." },
        { id: "shooting", name: "Shooting", description: "Test shot accuracy and form." },
      ],
      football: [
        { id: "dribbling", name: "Dribbling", description: "Control the ball while running." },
        { id: "passing", name: "Passing", description: "Evaluate accuracy and power of passes." },
      ],
    };

    const tournaments = [
      {
        id: "boxing-2025",
        name_key: "boxingChampionship",
        organizer_key: "boxingOrganizer",
        category_key: "boxingCategory",
        dates_key: "boxingDates",
        venue_key: "boxingVenue",
        image: "https://storage.googleapis.com/g-static-s-content/images/WhatsApp%20Image%202025-09-24%20at%209.02.40%20PM.jpeg",
      },
      {
        id: "basketball-2025",
        name_key: "basketballChampionship",
        organizer_key: "basketballOrganizer",
        category_key: "basketballCategory",
        dates_key: "basketballDates",
        venue_key: "basketballVenue",
        image: "https://storage.googleapis.com/g-static-s-content/images/WhatsApp%20Image%202025-09-24%20at%209.02.37%20PM.jpeg",
      }
    ];

    const Modal = ({ show, title, message, onClose }) => {
      if (!show) {
        return null;
      }
    
      return (
        <div className="fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-xl shadow-2xl p-6 w-full max-w-sm">
            <h3 className="text-xl font-bold mb-2">{title}</h3>
            <p className="text-gray-700 mb-6">{message}</p>
            <div className="flex justify-end space-x-4">
              <button
                onClick={onClose}
                className="px-4 py-2 text-sm font-medium text-gray-700 bg-gray-200 hover:bg-gray-300 rounded-lg"
              >
                Close
              </button>
            </div>
          </div>
        </div>
      );
    };

    const translations = {
      en: {
        appTitle: "SAI Assessments",
        welcome: "Welcome to SAI Assessments",
        welcomeMessage: "Your journey to athletic excellence begins here. Select a test to get started.",
        selectLanguage: "Select your language",
        home: "Home",
        options: "Options",
        leaderboard: "Leaderboard",
        tournament: "Tournament",
        menu: "Menu",
        selectAssessment: "Select Assessment Test",
        verticalJump: "Vertical Jump",
        verticalJumpDesc: "Measure your explosive leg power",
        shuttleRun: "Shuttle Run",
        shuttleRunDesc: "Test your speed and agility",
        sitUps: "Sit-ups",
        sitUpsDesc: "Assess your core endurance",
        enduranceRun: "Endurance Run",
        enduranceRunDesc: "Evaluate your cardiovascular fitness",
        startRecording: "Start Recording",
        uploadVideo: "Upload Video",
        startTest: "Start Test",
        backToHome: "← Back to Home",
        backToOptions: "← Back to Options",
        backToMenu: "← Back to Menu",
        backToSportSelection: "← Back to Sport Selection",
        performanceTest: (testName) => `${testName} Test`,
        recordingInProgress: "Recording in progress...",
        performTestNow: "Perform the test now",
        analyzingPerformance: "Analyzing performance...",
        complete: "complete",
        cameraNotFound: "Camera Not Found",
        cameraError: "Camera not found or access denied. Please ensure a camera is connected and permissions are granted.",
        tryAgain: "Try Again",
        videoReady: "Video Ready for Analysis",
        videoReadyDesc: "Click the button below to start the analysis of your uploaded video.",
        startAnalysis: "Start Analysis",
        reviewPerformance: "Review your performance",
        retakeReupload: "Retake/Re-upload",
        testResults: "Test Results",
        score: "Score",
        percentile: "Percentile",
        aiFeedback: "AI Feedback:",
        submit: "Submit to SAI Database",
        newTest: "Start a New Test",
        submissionMessage: "Submitting your results to the SAI database...",
        submissionSuccess: "Submission successful! Your data has been recorded.",
        selectOption: "Select Option",
        basic: "Basic",
        basicDesc: "Perform standard physical tests.",
        sportType: "Sport Type",
        sportTypeDesc: "Assess your skills for specific sports.",
        yourTalent: "Your Talent",
        yourTalentDesc: "Discover your hidden athletic talents.",
        leaderboardPage: "Leaderboard",
        leaderboardUnderConstruction: "This page is under construction. Please check back later!",
        tournamentPage: "Tournament",
        tournamentUnderConstruction: "This page is under construction. Please check back later!",
        contact: "Contact",
        contactMessage: "For inquiries, please contact us at contact@saiassessments.com",
        support: "Support",
        supportMessage: "For support, please visit our help center or open a support ticket.",
        yourTalentPage: "Your Talent",
        uploadVideoDesc: "Select a video to discover your talent.",
        writeDescription: "Write a short description of your talent...",
        submitToReview: "Submit to Review",
        submissionReceived: "Submission Received!",
        submissionReceivedMessage: "Thank you for sharing your talent. We will review your video shortly.",
        goBackToOptions: "Go Back to Options",
        selectSport: "Select a Sport",
        basketball: "Basketball",
        basketballDesc: "Assess core basketball skills.",
        football: "Football",
        footballDesc: "Evaluate fundamental football techniques.",
        basketballSkills: "Basketball Skills",
        footballSkills: "Football Skills",
        dribbling: "Dribbling",
        dribblingDesc: "Control the ball while in motion.",
        shooting: "Shooting",
        shootingDesc: "Test shot accuracy and form.",
        passing: "Passing",
        passingDesc: "Evaluate accuracy and power of passes.",
        loginTitle: "Login or Sign In",
        username: "Username",
        password: "Password",
        signIn: "Sign In",
        login: "Login",
        submitLogin: "Submit",
        language: "en",
        boxingChampionship: "National Boxing Championship – 2025",
        boxingOrganizer: "Boxing Federation of India",
        boxingCategory: "4th Sub Junior Boys’ & Girls’ National Boxing Championship",
        boxingDates: "7th – 13th August, 2025",
        boxingVenue: "Galgotias University, Greater Noida",
        basketballChampionship: "Junior National Basketball Championship – 2025",
        basketballOrganizer: "Basketball Federation of India & Punjab Basketball Association",
        basketballCategory: "Junior National Boys’ & Girls’ Basketball Championship",
        basketballDates: "2nd – 9th September, 2025",
        basketballVenue: "Guru Nanak Indoor Stadium, Ludhiana, Punjab",
      },
      hi: {
        appTitle: "साई आकलन",
        welcome: "साई आकलन में आपका स्वागत है",
        welcomeMessage: "खेलों में उत्कृष्टता की आपकी यात्रा यहाँ से शुरू होती है। आरंभ करने के लिए एक टेस्ट चुनें।",
        selectLanguage: "अपनी भाषा चुनें",
        home: "होम",
        options: "विकल्प",
        leaderboard: "लीडरबोर्ड",
        tournament: "टूर्नामेंट",
        menu: "मेन्यू",
        selectAssessment: "आकलन टेस्ट चुनें",
        verticalJump: "ऊर्ध्वाधर कूद",
        verticalJumpDesc: "अपनी विस्फोटक पैर की शक्ति को मापें",
        shuttleRun: "शटल रन",
        shuttleRunDesc: "अपनी गति और चपलता का परीक्षण करें",
        sitUps: "सिट-अप्स",
        sitUpsDesc: "अपने कोर सहनशक्ति का आकलन करें",
        enduranceRun: "एंड्योरेंस रन",
        enduranceRunDesc: "अपनी कार्डियोवस्कुलर फिटनेस का मूल्यांकन करें",
        startRecording: "रिकॉर्डिंग शुरू करें",
        uploadVideo: "वीडियो अपलोड करें",
        startTest: "टेस्ट शुरू करें",
        backToHome: "← होम पर वापस जाएं",
        backToOptions: "← विकल्पों पर वापस जाएं",
        backToMenu: "← मेन्यू पर वापस जाएं",
        backToSportSelection: "← खेल चयन पर वापस जाएं",
        performanceTest: (testName) => `${testName} टेस्ट`,
        recordingInProgress: "रिकॉर्डिंग चल रही है...",
        performTestNow: "अभी टेस्ट करें",
        analyzingPerformance: "प्रदर्शन का विश्लेषण हो रहा है...",
        complete: "पूरा हुआ",
        cameraNotFound: "कैमरा नहीं मिला",
        cameraError: "कैमरा नहीं मिला या पहुंच से वंचित है। कृपया सुनिश्चित करें कि एक कैमरा जुड़ा हुआ है और अनुमतियां दी गई हैं।",
        videoReady: "वीडियो विश्लेषण के लिए तैयार है",
        videoReadyDesc: "अपने अपलोड किए गए वीडियो का विश्लेषण शुरू करने के लिए नीचे दिए गए बटन पर क्लिक करें।",
        startAnalysis: "विश्लेषण शुरू करें",
        reviewPerformance: "अपने प्रदर्शन की समीक्षा करें",
        retakeReupload: "फिर से लें/फिर से अपलोड करें",
        testResults: "टेस्ट परिणाम",
        score: "स्कोर",
        percentile: "प्रतिशत",
        aiFeedback: "एआई फीडबैक:",
        submit: "साई डेटाबेस में सबमिट करें",
        newTest: "एक नया टेस्ट शुरू करें",
        submissionMessage: "आपके परिणाम साई डेटाबेस में सबमिट किए जा रहे हैं...",
        submissionSuccess: "सबमिशन सफल! आपका डेटा रिकॉर्ड कर लिया गया है।",
        selectOption: "विकल्प चुनें",
        basic: "बुनियादी",
        basicDesc: "मानक शारीरिक परीक्षण करें।",
        sportType: "खेल का प्रकार",
        sportTypeDesc: "विशिष्ट खेलों के लिए अपने कौशल का आकलन करें।",
        yourTalent: "आपकी प्रतिभा",
        yourTalentDesc: "अपनी छिपी हुई एथलेटिक प्रतिभाओं का पता लगाएं।",
        leaderboardPage: "लीडरबोर्ड",
        leaderboardUnderConstruction: "यह पृष्ठ निर्माणाधीन है। कृपया बाद में जांच करें!",
        tournamentPage: "टूर्नामेंट",
        tournamentUnderConstruction: "यह पृष्ठ निर्मानाधीन है। कृपया बाद में जांच करें!",
        contact: "संपर्क",
        contactMessage: "पूछताछ के लिए, कृपया हमसे contact@saiassessments.com पर संपर्क करें",
        support: "समर्थन",
        supportMessage: "समर्थन के लिए, कृपया हमारे सहायता केंद्र पर जाएं या एक समर्थन टिकट खोलें।",
        yourTalentPage: "आपकी प्रतिभा",
        uploadVideoDesc: "अपनी प्रतिभा का पता लगाने के लिए एक वीडियो चुनें।",
        writeDescription: "अपनी प्रतिभा का एक छोटा विवरण लिखें...",
        submitToReview: "समीक्षा के लिए सबमिट करें",
        submissionReceived: "सबमिशन प्राप्त हुआ!",
        submissionReceivedMessage: "अपनी प्रतिभा साझा करने के लिए धन्यवाद। हम जल्द ही आपके वीडियो की समीक्षा करेंगे।",
        goBackToOptions: "विकल्पों पर वापस जाएं",
        selectSport: "एक खेल चुनें",
        basketball: "बास्केटबॉल",
        basketballDesc: "मुख्य बास्केटबॉल कौशल का आकलन करें।",
        football: "फुटबॉल",
        footballDesc: "बुनियादी फुटबॉल तकनीकों का मूल्यांकन करें।",
        basketballSkills: "बास्केटबॉल कौशल",
        footballSkills: "फुटबॉल कौशल",
        dribbling: "ड्रिब्लिंग",
        dribblingDesc: "गति में रहते हुए गेंद को नियंत्रित करें।",
        shooting: "शूटिंग",
        shootingDesc: "शॉट की सटीकता और फॉर्म का परीक्षण करें।",
        passing: "पासिंग",
        passingDesc: "पास की सटीकता और शक्ति का मूल्यांकन करें।",
        loginTitle: "लॉगिन या साइन इन करें",
        username: "उपयोगकर्ता नाम",
        password: "पासवर्ड",
        signIn: "साइन इन करें",
        login: "लॉगिन करें",
        submitLogin: "सबमिट करें",
        boxingChampionship: "राष्ट्रीय मुक्केबाजी चैंपियनशिप - 2025",
        boxingOrganizer: "भारतीय मुक्केबाजी महासंघ",
        boxingCategory: "4th सब जूनियर लड़कों और लड़कियों की राष्ट्रीय मुक्केबाजी चैंपियनशिप",
        boxingDates: "7 - 13 अगस्त, 2025",
        boxingVenue: "गलकोटिया विश्वविद्यालय, ग्रेटर नोएडा",
        basketballChampionship: "जूनियर नेशनल बास्केटबॉल चैंपियनशिप - 2025",
        basketballOrganizer: "भारतीय बास्केटबॉल महासंघ और पंजाब बास्केटबॉल एसोसिएशन",
        basketballCategory: "जूनियर नेशनल लड़कों और लड़कियों की बास्केटबॉल चैंपियनशिप",
        basketballDates: "2 - 9 सितंबर, 2025",
        basketballVenue: "गुरु नानक इंडोर स्टेडियम, लुधियाना, पंजाब",
      },
      te: {
        appTitle: "సాయి అసెస్‌మెంట్స్",
        welcome: "సాయి అసెస్‌మెంట్స్‌కు స్వాగతం",
        welcomeMessage: "అథ్లెటిక్ నైపుణ్యానికి మీ ప్రయాణం ఇక్కడ ప్రారంభమవుతుంది. ప్రారంభించడానికి ఒక పరీక్షను ఎంచుకోండి.",
        selectLanguage: "మీ భాషను ఎంచుకోండి",
        home: "హోమ్",
        options: "ఎంపికలు",
        leaderboard: "లీడర్‌బోర్డ్",
        tournament: "టోర్నమెంట్",
        menu: "మెనూ",
        selectAssessment: "అసెస్‌మెంట్ పరీక్షను ఎంచుకోండి",
        verticalJump: "వర్టికల్ జంప్",
        verticalJumpDesc: "మీ పేలుడు కాలు శక్తిని కొలవండి",
        shuttleRun: "షటిల్ రన్",
        shuttleRunDesc: "మీ వేగం మరియు చురుకుదనాన్ని పరీక్షించండి",
        sitUps: "సిట్-అప్స్",
        sitUpsDesc: "మీ కోర్ స్టామినాను అంచనా వేయండి",
        enduranceRun: "ఎండ్యూరెన్స్ రన్",
        enduranceRunDesc: "మీ కార్డియోవాస్కులర్ ఫిట్‌నెస్‌ను మూల్యాంకనం చేయండి",
        startRecording: "రికార్డింగ్ ప్రారంభించండి",
        uploadVideo: "వీడియోను అప్‌లోడ్ చేయండి",
        startTest: "పరీక్షను ప్రారంభించండి",
        backToHome: "← హోమ్‌కు తిరిగి వెళ్లండి",
        backToOptions: "← ఎంపికలకు తిరిగి వెళ్లండి",
        backToMenu: "← మెనూకు తిరిగి వెళ్లండి",
        backToSportSelection: "← క్రీడా ఎంపికకు తిరిగి వెళ్లండి",
        performanceTest: (testName) => `${testName} పరీక్ష`,
        recordingInProgress: "రికార్డింగ్ జరుగుతోంది...",
        performTestNow: "ఇప్పుడు పరీక్ష చేయండి",
        analyzingPerformance: "పనితీరును విశ్లేషిస్తోంది...",
        complete: "పూర్తయింది",
        cameraNotFound: "కెమెరా కనుగొనబడలేదు",
        cameraError: "కెమెరా కనుగొనబడలేదు లేదా యాక్సెస్ నిరాకరించబడింది. దయచేసి కెమెరా కనెక్ట్ అయిందని మరియు అనుమతులు మంజూరు చేయబడ్డాయని నిర్ధారించుకోండి.",
        videoReady: "విశ్లేషణకు వీడియో సిద్ధంగా ఉంది",
        videoReadyDesc: "మీరు అప్‌లోడ్ చేసిన వీడియో విశ్లేషణను ప్రారంభించడానికి దిగువ బటన్‌ను క్లిక్ చేయండి.",
        startAnalysis: "విశ్లేషణను ప్రారంభించండి",
        reviewPerformance: "మీ పనితీరును సమీక్షించండి",
        retakeReupload: "తిరిగి తీసుకోండి/తిరిగి అప్‌లోడ్ చేయండి",
        testResults: "పరీక్ష ఫలితాలు",
        score: "స్కోర్",
        percentile: "శాతం",
        aiFeedback: "AI ఫీడ్‌బ్యాక్:",
        submit: "SAI డేటాబేస్‌కు సమర్పించండి",
        newTest: "కొత్త పరీక్షను ప్రారంభించండి",
        submissionMessage: "మీ ఫలితాలు SAI డేటాబేస్‌కు సమర్పించబడుతున్నాయి...",
        submissionSuccess: "సమర్పణ విజయవంతమైంది! మీ డేటా రికార్డ్ చేయబడింది.",
        selectOption: "ఎంపికను ఎంచుకోండి",
        basic: "ప్రాథమిక",
        basicDesc: "ప్రామాణిక శారీరక పరీక్షలు చేయండి.",
        sportType: "క్రీడా రకం",
        sportTypeDesc: "నిర్దిష్ట క్రీడల కోసం మీ నైపుణ్యాలను అంచనా వేయండి.",
        yourTalent: "మీ ప్రతిభ",
        yourTalentDesc: "మీ దాగి ఉన్న అథ్లెటిక్ ప్రతిభను కనుగొనండి.",
        leaderboardPage: "లీడర్‌బోర్డ్",
        leaderboardUnderConstruction: "ఈ పేజీ నిర్మాణంలో ఉంది. దయచేసి తర్వాత మళ్లీ తనిఖీ చేయండి!",
        tournamentPage: "టోర్నమెంట్",
        tournamentUnderConstruction: "ఈ పేజీ నిర్మాణంలో ఉంది. దయచేసి తర్వాత మళ్లీ తనిఖీ చేయండి!",
        contact: "సంప్రదించండి",
        contactMessage: "విచారణల కోసం, దయచేసి contact@saiassessments.comలో మమ్మల్ని సంప్రదించండి",
        support: "మద్దతు",
        supportMessage: "మద్దతు కోసం, దయచేసి మా సహాయ కేంద్రాన్ని సందర్శించండి లేదా మద్దతు టికెట్‌ను తెరవండి.",
        yourTalentPage: "మీ ప్రతిభ",
        uploadVideoDesc: "మీ ప్రతిభను కనుగొనడానికి ఒక వీడియోను ఎంచుకోండి.",
        writeDescription: "మీ ప్రతిభ గురించి ఒక చిన్న వివరణ రాయండి...",
        submitToReview: "సమీక్షకు సమర్పించండి",
        submissionReceived: "సమర్పణ స్వీకరించబడింది!",
        submissionReceivedMessage: "మీ ప్రతిభను పంచుకున్నందుకు ధన్యవాదాలు. మేము మీ వీడియోను త్వరలో సమీక్షిస్తాము.",
        goBackToOptions: "ఎంపికలకు తిరిగి వెళ్లండి",
        selectSport: "ఒక క్రీడను ఎంచుకోండి",
        basketball: "బాస్కెట్‌బాల్",
        basketballDesc: "ప్రధాన బాస్కెట్‌బాల్ నైపుణ్యాలను అంచనా వేయండి.",
        football: "ఫుట్‌బాల్",
        footballDesc: "ప్రాథమిక ఫుట్‌బాల్ టెక్నిక్‌లను మూల్యాంకనం చేయండి.",
        basketballSkills: "బాస్కెట్‌బాల్ నైపుణ్యాలు",
        footballSkills: "ఫుట్‌బాల్ నైపుణ్యాలు",
        dribbling: "డ్రిబ్లింగ్",
        dribblingDesc: "కదలికలో ఉన్నప్పుడు బంతిని నియంత్రించండి.",
        shooting: "షూటింగ్",
        shootingDesc: "షాట్ యొక్క ఖచ్చితత్వం మరియు ఫామ్‌ను పరీక్షించండి.",
        passing: "పాసింగ్",
        passingDesc: "పాస్‌ల ఖచ్చితత్వం మరియు శక్తిని మూల్యాంకనం చేయండి.",
        loginTitle: "లాగిన్ లేదా సైన్ ఇన్ చేయండి",
        username: "వినియోగదారు పేరు",
        password: "పాస్వర్డ్",
        signIn: "సైన్ ఇన్ చేయండి",
        login: "లాగిన్ చేయండి",
        submitLogin: "సమర్పించండి",
        boxingChampionship: "జాతీయ బాక్సింగ్ ఛాంపియన్‌షిప్ - 2025",
        boxingOrganizer: "బాక్సింగ్ ఫెడరేషన్ ఆఫ్ ఇండియా",
        boxingCategory: "4వ సబ్ జూనియర్ బాయ్స్ & గర్ల్స్ జాతీయ బాక్సింగ్ ఛాంపియన్‌షిప్",
        boxingDates: "7 - 13 ఆగస్ట్, 2025",
        boxingVenue: "గాల్గోటియాస్ యూనివర్సిటీ, గ్రేటర్ నోయిడా",
        basketballChampionship: "జూనియర్ జాతీయ బాస్కెట్‌బాల్ ఛాంపియన్‌షిప్ - 2025",
        basketballOrganizer: "బాస్కెట్‌బాల్ ఫెడరేషన్ ఆఫ్ ఇండియా & పంజాబ్ బాస్కెట్‌బాల్ అసోసియేషన్",
        basketballCategory: "జూనియర్ జాతీయ బాయ్స్ & గర్ల్స్ బాస్కెట్‌బాల్ ఛాంపియన్‌షిప్",
        basketballDates: "2 - 9 సెప్టెంబర్, 2025",
        basketballVenue: "గురు నానక్ ఇండోర్ స్టేడియం, లుధియానా, పంజాబ్",
      },
    };

    const HomePage = ({ t }) => {
      const images = [
        'https://raw.githubusercontent.com/Anand-R78/sports-talent-assessment/main/WhatsApp_Image_2025-09-24_at_7.14.52_PM.jpeg',
        'https://raw.githubusercontent.com/Anand-R78/sports-talent-assessment/main/WhatsApp_Image_2025-09-24_at_7.14.52_PM_(1).jpeg',
        'https://raw.githubusercontent.com/Anand-R78/sports-talent-assessment/main/WhatsApp_Image_2025-09-24_at_7.14.52_PM_(2).jpeg',
      ];
      return (
        <div className="max-w-md mx-auto p-6 bg-white rounded-xl shadow-xl text-center">
          <h1 className="text-4xl font-extrabold mb-4 text-gray-900">
            {t.welcome}
          </h1>
          <p className="text-gray-600 mb-8">
            {t.welcomeMessage}
          </p>
          <div className="flex space-x-4 overflow-x-scroll no-scrollbar p-2 rounded-xl border border-gray-200">
            {images.map((img, index) => (
              <div key={index} className="flex-shrink-0 w-80 rounded-lg shadow-md overflow-hidden">
                <img src={img} alt={`Athlete ${index + 1}`} className="w-full h-auto object-cover" />
              </div>
            ))}
          </div>
        </div>
      );
    };

    const TestSelection = ({ onStartTest, onBack, t }) => {
      const [selectedTestId, setSelectedTestId] = useState(null);
      const selectedTest = selectedTestId ? tests.find((t) => t.id === selectedTestId) : null;
      const handleFileUpload = (e) => {
        const file = e.target.files?.[0];
        if (file) {
          const videoBlob = new Blob([file], { type: file.type });
          if (selectedTest) {
            onStartTest(selectedTest, 'file', videoBlob);
          }
        }
      };
      const getTranslatedTest = (test) => {
        switch (test.id) {
          case 'verticalJump':
            return { name: t.verticalJump, description: t.verticalJumpDesc };
          case 'shuttleRun':
            return { name: t.shuttleRun, description: t.shuttleRunDesc };
          case 'sitUps':
            return { name: t.sitUps, description: t.sitUpsDesc };
          case 'enduranceRun':
            return { name: t.enduranceRun, description: t.enduranceRunDesc };
          default:
            return test;
        }
      };
      return (
        <div className="max-w-md mx-auto p-6 bg-white rounded-xl shadow-xl">
          <button onClick={onBack} className="flex items-center text-blue-600 hover:underline mb-4 text-sm font-semibold">
            ← {t.backToHome}
          </button>
          <h1 className="text-4xl font-extrabold mb-6 text-center text-gray-900">
            {t.selectAssessment}
          </h1>
          <div className="grid grid-cols-1 gap-4">
            {tests.map((test) => {
              const translatedTest = getTranslatedTest(test);
              return (
                <button
                  key={test.id}
                  onClick={() => setSelectedTestId(test.id)}
                  className={`p-4 rounded-xl border-2 transition-all duration-300 transform hover:scale-105 ${
                    selectedTestId === test.id
                      ? "border-blue-600 bg-blue-50 shadow-md"
                      : "border-gray-200 bg-white"
                  }`}
                >
                  <h2 className="text-xl font-semibold text-gray-800">{translatedTest.name}</h2>
                  <p className="text-sm text-gray-500">{translatedTest.description}</p>
                </button>
              );
            })}
          </div>
          <div className="mt-8 text-center">
            {selectedTest ? (
              <div className="flex flex-col md:flex-row space-y-4 md:space-y-0 md:space-x-4">
                <button
                  onClick={() => onStartTest(selectedTest, 'camera')}
                  className="flex-1 px-6 py-4 rounded-xl text-lg font-bold transition-all duration-300 bg-blue-600 hover:bg-blue-700 text-white shadow-lg"
                >
                  {t.startRecording}
                </button>
                <label className="flex-1 px-6 py-4 rounded-xl text-lg font-bold transition-all duration-300 bg-gray-600 hover:bg-gray-700 text-white shadow-lg cursor-pointer">
                  {t.uploadVideo}
                  <input type="file" accept="video/*" className="hidden" onChange={handleFileUpload} />
                </label>
              </div>
            ) : (
              <button
                disabled
                className="w-full px-6 py-4 rounded-xl text-lg font-bold transition-all duration-300 bg-gray-300 text-gray-500 cursor-not-allowed"
              >
                {t.startTest}
              </button>
            )}
          </div>
        </div>
      );
    };

    const LeaderboardPage = ({ onBack, t }) => {
      return (
        <div className="max-w-md mx-auto p-6 bg-white rounded-xl shadow-xl text-center">
          <button onClick={onBack} className="flex items-center text-blue-600 hover:underline mb-4 text-sm font-semibold">
            ← {t.backToHome}
          </button>
          <h1 className="text-4xl font-extrabold mb-4 text-gray-900">{t.leaderboardPage}</h1>
          <p className="text-gray-600">{t.leaderboardUnderConstruction}</p>
        </div>
      );
    };
    const TournamentDetailsModal = ({ tournament, onClose, t }) => {
      if (!tournament) return null;
      return (
        <div className="fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-xl shadow-2xl p-6 w-full max-w-lg">
            <div className="flex justify-between items-start mb-4">
              <h3 className="text-xl font-bold">{t[tournament.name_key]}</h3>
              <button onClick={onClose} className="text-gray-500 hover:text-gray-900 focus:outline-none">
                <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>
            <img src={tournament.image} alt={t[tournament.name_key]} className="w-full h-auto rounded-lg mb-4" />
            <p><strong>Organizer:</strong> {t[tournament.organizer_key]}</p>
            <p><strong>Category:</strong> {t[tournament.category_key]}</p>
            <p><strong>Dates:</strong> {t[tournament.dates_key]}</p>
            <p><strong>Venue:</strong> {t[tournament.venue_key]}</p>
          </div>
        </div>
      );
    };

    const TournamentPage = ({ onBack, t }) => {
      const [selectedTournament, setSelectedTournament] = useState(null);
      return (
        <div className="max-w-md mx-auto p-6 bg-white rounded-xl shadow-xl text-center">
          <button onClick={onBack} className="flex items-center text-blue-600 hover:underline mb-4 text-sm font-semibold">
            ← {t.backToHome}
          </button>
          <h1 className="text-4xl font-extrabold mb-6 text-gray-900">{t.tournamentPage}</h1>
          <div className="grid grid-cols-1 gap-4">
            {tournaments.map((tournament) => (
              <div 
                key={tournament.id} 
                onClick={() => setSelectedTournament(tournament)}
                className="p-4 rounded-xl border-2 border-gray-200 bg-white transition-all duration-300 transform hover:scale-105 hover:border-blue-600 hover:bg-blue-50 text-left cursor-pointer"
              >
                <img src={tournament.image} alt={t[tournament.name_key]} className="w-full h-auto rounded-lg mb-2" />
                <h2 className="text-xl font-semibold text-gray-800">{t[tournament.name_key]}</h2>
                <p className="text-sm text-gray-500">{t[tournament.organizer_key]}</p>
              </div>
            ))}
          </div>
          <TournamentDetailsModal 
            tournament={selectedTournament}
            onClose={() => setSelectedTournament(null)}
            t={t}
          />
        </div>
      );
    };

    const ContactPage = ({ onBack, t }) => {
      return (
        <div className="max-w-md mx-auto p-6 bg-white rounded-xl shadow-xl text-center">
          <button onClick={onBack} className="flex items-center text-blue-600 hover:underline mb-4 text-sm font-semibold">
            ← {t.backToMenu}
          </button>
          <h1 className="text-4xl font-extrabold mb-4 text-gray-900">{t.contact}</h1>
          <p className="text-gray-600">{t.contactMessage}</p>
        </div>
      );
    };

    const SupportPage = ({ onBack, t }) => {
      return (
        <div className="max-w-md mx-auto p-6 bg-white rounded-xl shadow-xl text-center">
          <button onClick={onBack} className="flex items-center text-blue-600 hover:underline mb-4 text-sm font-semibold">
            ← {t.backToMenu}
          </button>
          <h1 className="text-4xl font-extrabold mb-4 text-gray-900">{t.support}</h1>
          <p className="text-gray-600">{t.supportMessage}</p>
        </div>
      );
    };

    const LoginPage = ({ onBack, t }) => {
      const [username, setUsername] = useState('');
      const [password, setPassword] = useState('');
      const handleSubmit = () => { onBack(); };
      return (
        <div className="max-w-md mx-auto p-6 bg-white rounded-xl shadow-xl">
          <button onClick={onBack} className="flex items-center text-blue-600 hover:underline mb-4 text-sm font-semibold">
            ← {t.backToHome}
          </button>
          <h1 className="text-4xl font-extrabold mb-6 text-center text-gray-900">{t.loginTitle}</h1>
          <div className="w-full space-y-4">
            <input type="text" className="w-full p-4 border-2 border-gray-200 rounded-xl text-gray-800 focus:outline-none focus:border-blue-600 transition-colors duration-200" placeholder={t.username} value={username} onChange={(e) => setUsername(e.target.value)} />
            <input type="password" className="w-full p-4 border-2 border-gray-200 rounded-xl text-gray-800 focus:outline-none focus:border-blue-600 transition-colors duration-200" placeholder={t.password} value={password} onChange={(e) => setPassword(e.target.value)} />
            <div className="flex justify-between space-x-4">
              <button onClick={handleSubmit} className="flex-1 px-4 py-2 rounded-xl text-sm font-bold transition-all duration-300 bg-blue-600 hover:bg-blue-700 text-white shadow-lg">
                {t.signIn}
              </button>
              <button onClick={handleSubmit} className="flex-1 px-4 py-2 rounded-xl text-sm font-bold transition-all duration-300 bg-blue-600 hover:bg-blue-700 text-white shadow-lg">
                {t.login}
              </button>
            </div>
            <button onClick={handleSubmit} className="w-full px-6 py-4 rounded-xl text-lg font-bold transition-all duration-300 bg-gray-600 hover:bg-gray-700 text-white shadow-lg">
              {t.submitLogin}
            </button>
          </div>
        </div>
      );
    };
    const Menu = ({ isOpen, onClose, onSelectOption, onOpenLanguageBar, onOpenLoginPage, t }) => {
      return (
        <div className={`fixed inset-0 z-40 transition-transform duration-300 ease-in-out ${isOpen ? 'translate-x-0' : 'translate-x-full'}`}>
          <div className="absolute inset-0 bg-gray-600 bg-opacity-50" onClick={onClose}></div>
          <div className="absolute right-0 top-0 h-full w-80 bg-white rounded-l-2xl shadow-xl p-6 flex flex-col justify-start items-center">
            <button onClick={onClose} className="self-end text-gray-500 hover:text-gray-900 focus:outline-none">
              <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
            <h2 className="text-2xl font-bold mt-4 mb-8">{t.menu}</h2>
            <div className="w-full space-y-4">
              <button onClick={() => { onOpenLoginPage(); onClose(); }} className="w-full p-4 rounded-xl border-2 border-gray-200 bg-white transition-all duration-300 transform hover:scale-105 hover:border-blue-600 hover:bg-blue-50 text-left">
                <h3 className="text-xl font-semibold text-gray-800">{t.login}</h3>
              </button>
              <button onClick={() => { onSelectOption('contact'); onClose(); }} className="w-full p-4 rounded-xl border-2 border-gray-200 bg-white transition-all duration-300 transform hover:scale-105 hover:border-blue-600 hover:bg-blue-50 text-left">
                <h3 className="text-xl font-semibold text-gray-800">{t.contact}</h3>
                <p className="text-sm text-gray-500">{t.contactMessage}</p>
              </button>
              <button onClick={() => { onSelectOption('support'); onClose(); }} className="w-full p-4 rounded-xl border-2 border-gray-200 bg-white transition-all duration-300 transform hover:scale-105 hover:border-blue-600 hover:bg-blue-50 text-left">
                <h3 className="text-xl font-semibold text-gray-800">{t.support}</h3>
                <p className="text-sm text-gray-500">{t.supportMessage}</p>
              </button>
            </div>
            <div className="mt-8 pt-4 border-t border-gray-200 w-full space-y-2">
              <button onClick={() => { onOpenLanguageBar(); onClose(); }} className="w-full p-4 rounded-xl border-2 border-gray-200 bg-white transition-all duration-300 transform hover:scale-105 hover:border-blue-600 hover:bg-blue-50 text-left">
                <h3 className="text-xl font-semibold text-gray-800">{t.selectLanguage}</h3>
              </button>
            </div>
          </div>
        </div>
      );
    };

    const LanguageBar = ({ isOpen, onClose, onSelectLanguage, t }) => {
      return (
        <div className={`fixed inset-0 z-40 flex items-center justify-center transition-opacity duration-300 ${isOpen ? 'opacity-100' : 'opacity-0 pointer-events-none'}`}>
          <div className="absolute inset-0 bg-gray-600 bg-opacity-50" onClick={onClose}></div>
          <div className="bg-white rounded-xl shadow-2xl p-6 w-full max-w-sm flex flex-col items-center relative transform transition-transform duration-300 ease-in-out">
            <h2 className="text-2xl font-bold mb-6">{t.selectLanguage}</h2>
            <div className="flex flex-col space-y-4 w-full">
              <button onClick={() => { onSelectLanguage('en'); }} className="w-full p-4 rounded-xl text-lg font-bold transition-all duration-300 bg-blue-600 hover:bg-blue-700 text-white shadow-lg">
                English
              </button>
              <button onClick={() => { onSelectLanguage('hi'); }} className="w-full p-4 rounded-xl text-lg font-bold transition-all duration-300 bg-blue-600 hover:bg-blue-700 text-white shadow-lg">
                हिन्दी
              </button>
              <button onClick={() => { onSelectLanguage('te'); }} className="w-full p-4 rounded-xl text-lg font-bold transition-all duration-300 bg-blue-600 hover:bg-blue-700 text-white shadow-lg">
                తెలుగు
              </button>
            </div>
          </div>
        </div>
      );
    };

    const OptionsBar = ({ isOpen, onClose, onSelectOption, t }) => {
      return (
        <div className={`fixed inset-0 z-40 flex items-center justify-center transition-opacity duration-300 ${isOpen ? 'opacity-100' : 'opacity-0 pointer-events-none'}`}>
          <div className="absolute inset-0 bg-gray-600 bg-opacity-50" onClick={onClose}></div>
          <div className="bg-white rounded-xl shadow-2xl p-6 w-full max-w-sm flex flex-col items-center relative transform transition-transform duration-300 ease-in-out">
            <h2 className="text-2xl font-bold mb-6">{t.selectOption}</h2>
            <div className="w-full space-y-4">
              <button onClick={() => { onSelectOption('testSelection'); onClose(); }} className="w-full p-4 rounded-xl border-2 border-gray-200 bg-white transition-all duration-300 transform hover:scale-105 hover:border-blue-600 hover:bg-blue-50 text-left">
                <h3 className="text-xl font-semibold text-gray-800">{t.basic}</h3>
                <p className="text-sm text-gray-500">{t.basicDesc}</p>
              </button>
              <button onClick={() => { onSelectOption('sportType'); onClose(); }} className="w-full p-4 rounded-xl border-2 border-gray-200 bg-white transition-all duration-300 transform hover:scale-105 hover:border-blue-600 hover:bg-blue-50 text-left">
                <h3 className="text-xl font-semibold text-gray-800">{t.sportType}</h3>
                <p className="text-sm text-gray-500">{t.sportTypeDesc}</p>
              </button>
              <button onClick={() => { onSelectOption('yourTalent'); onClose(); }} className="w-full p-4 rounded-xl border-2 border-gray-200 bg-white transition-all duration-300 transform hover:scale-105 hover:border-blue-600 hover:bg-blue-50 text-left">
                <h3 className="text-xl font-semibold text-gray-800">{t.yourTalent}</h3>
                <p className="text-sm text-gray-500">{t.yourTalentDesc}</p>
              </button>
            </div>
          </div>
        </div>
      );
    };

    const SportTypeSelectionPage = ({ onSelectSport, onBack, t }) => {
      const getTranslatedSport = (sport) => {
        switch (sport.id) {
          case 'basketball':
            return { name: t.basketball, description: t.basketballDesc };
          case 'football':
            return { name: t.football, description: t.footballDesc };
          default:
            return sport;
        }
      };
      return (
        <div className="max-w-md mx-auto p-6 bg-white rounded-xl shadow-xl text-center">
          <button onClick={onBack} className="flex items-center text-blue-600 hover:underline mb-4 text-sm font-semibold">
            ← {t.backToOptions}
          </button>
          <h1 className="text-4xl font-extrabold mb-6 text-gray-900">{t.selectSport}</h1>
          <div className="grid grid-cols-1 gap-4">
            {sportTypes.map((sport) => {
              const translatedSport = getTranslatedSport(sport);
              return (
                <button
                  key={sport.id}
                  onClick={() => onSelectSport(sport.id)}
                  className="p-4 rounded-xl border-2 border-gray-200 bg-white transition-all duration-300 transform hover:scale-105 hover:border-blue-600 hover:bg-blue-50 text-left"
                >
                  <h2 className="text-xl font-semibold text-gray-800">{translatedSport.name}</h2>
                  <p className="text-sm text-gray-500">{translatedSport.description}</p>
                </button>
              );
            })}
          </div>
        </div>
      );
    };

    const QualitySelectionPage = ({ sportId, onStartTest, onBack, t }) => {
      const qualities = sportQualities[sportId];
      const [selectedQualityId, setSelectedQualityId] = useState(null);
      const selectedQuality = selectedQualityId ? qualities.find(q => q.id === selectedQualityId) : null;
      const handleFileUpload = (e) => {
        const file = e.target.files?.[0];
        if (file && selectedQuality) {
          const videoBlob = new Blob([file], { type: file.type });
          const test = {
            id: `${sportId}_${selectedQuality.id}`,
            name: `${t[sportId + 'Skills']} ${t[selectedQuality.id]}`,
            description: t[selectedQuality.id + 'Desc']
          };
          onStartTest(test, 'file', videoBlob);
        }
      };
      const getTranslatedQuality = (quality) => {
        switch (quality.id) {
          case 'dribbling':
            return { name: t.dribbling, description: t.dribblingDesc };
          case 'shooting':
            return { name: t.shooting, description: t.shootingDesc };
          case 'passing':
            return { name: t.passing, description: t.passingDesc };
          default:
            return quality;
        }
      };
      return (
        <div className="max-w-md mx-auto p-6 bg-white rounded-xl shadow-xl">
          <button onClick={onBack} className="flex items-center text-blue-600 hover:underline mb-4 text-sm font-semibold">
            ← {t.backToSportSelection}
          </button>
          <h1 className="text-4xl font-extrabold mb-6 text-gray-900">{t[sportId + 'Skills']}</h1>
          <div className="grid grid-cols-1 gap-4">
            {qualities.map((quality) => {
              const translatedQuality = getTranslatedQuality(quality);
              return (
                <button
                  key={quality.id}
                  onClick={() => setSelectedQualityId(quality.id)}
                  className={`p-4 rounded-xl border-2 transition-all duration-300 transform hover:scale-105 ${
                    selectedQualityId === quality.id
                      ? "border-blue-600 bg-blue-50 shadow-md"
                      : "border-gray-200 bg-white"
                  }`}
                >
                  <h2 className="text-xl font-semibold text-gray-800">{translatedQuality.name}</h2>
                  <p className="text-sm text-gray-500">{translatedQuality.description}</p>
                </button>
              );
            })}
          </div>
          <div className="mt-8 text-center">
            {selectedQuality ? (
              <div className="flex flex-col md:flex-row space-y-4 md:space-y-0 md:space-x-4">
                <button
                  onClick={() => {
                    const test = {
                      id: `${sportId}_${selectedQuality.id}`,
                      name: `${t[sportId + 'Skills']} ${t[selectedQuality.id]}`,
                      description: t[selectedQuality.id + 'Desc']
                    };
                    onStartTest(test, 'camera');
                  }}
                  className="flex-1 px-6 py-4 rounded-xl text-lg font-bold transition-all duration-300 bg-blue-600 hover:bg-blue-700 text-white shadow-lg"
                >
                  {t.startRecording}
                </button>
                <label className="flex-1 px-6 py-4 rounded-xl text-lg font-bold transition-all duration-300 bg-gray-600 hover:bg-gray-700 text-white shadow-lg cursor-pointer">
                  {t.uploadVideo}
                  <input type="file" accept="video/*" className="hidden" onChange={handleFileUpload} />
                </label>
              </div>
            ) : (
              <button
                disabled
                className="w-full px-6 py-4 rounded-xl text-lg font-bold transition-all duration-300 bg-gray-300 text-gray-500 cursor-not-allowed"
              >
                {t.startTest}
              </button>
            )}
          </div>
        </div>
      );
    };

    const YourTalentPage = ({ onBack, t, db }) => {
      const [uploadedVideo, setUploadedVideo] = useState(null);
      const [description, setDescription] = useState('');
      const [isSubmitted, setIsSubmitted] = useState(false);
      const [showModal, setShowModal] = useState(false);
      const [modalMessage, setModalMessage] = useState('');
      const [stream, setStream] = useState(null);
      const [recording, setRecording] = useState(false);
      const [retakeTrigger, setRetakeTrigger] = useState(0);
      const handleFileUpload = (e) => {
        const file = e.target.files?.[0];
        if (file) {
          const videoUrl = URL.createObjectURL(file);
          setUploadedVideo(videoUrl);
          setIsSubmitted(false);
        }
      };
      const startRecording = () => {
        navigator.mediaDevices.getUserMedia({ video: true, audio: false })
          .then(newStream => {
            setStream(newStream);
            setRecording(true);
            const mediaRecorder = new MediaRecorder(newStream);
            let chunks = [];
            mediaRecorder.ondataavailable = (e) => { chunks.push(e.data); };
            mediaRecorder.onstop = () => {
              const recordedVideoBlob = new Blob(chunks, { type: 'video/webm' });
              setUploadedVideo(URL.createObjectURL(recordedVideoBlob));
              setRecording(false);
              newStream.getTracks().forEach(track => track.stop());
            };
            mediaRecorder.start();
            setTimeout(() => { if (mediaRecorder.state === 'recording') { mediaRecorder.stop(); } }, 5000);
          })
          .catch(err => {
            console.error("Error accessing the camera:", err);
            setModalMessage(t.cameraError);
            setShowModal(true);
          });
      };
      useEffect(() => {
        if (stream) {
          const videoElement = document.getElementById('talentVideoElement');
          if (videoElement) { videoElement.srcObject = stream; }
        }
      }, [stream]);
      const handleSubmit = async () => {
        if (!db) {
          setModalMessage("Database not connected. Please try again later.");
          setShowModal(true);
          return;
        }
        setShowModal(true);
        setModalMessage(t.submissionMessage);
        try {
          await db.collection("talent_submissions").add({
            videoUrl: uploadedVideo,
            description: description,
            timestamp: firebase.firestore.FieldValue.serverTimestamp(),
          });
          setIsSubmitted(true);
          setModalMessage(t.submissionSuccess);
        } catch (e) {
          console.error("Error adding document: ", e);
          setModalMessage("Submission failed. Please try again.");
        }
      };
      const handleRetake = () => {
        setUploadedVideo(null);
        setDescription('');
        setIsSubmitted(false);
        setStream(null);
        setRetakeTrigger(t => t + 1);
      };
      return (
        <div className="max-w-md mx-auto p-6 bg-white rounded-xl shadow-xl text-center">
          <button onClick={onBack} className="flex items-center text-blue-600 hover:underline mb-4 text-sm font-semibold">
            ← {t.backToOptions}
          </button>
          <h1 className="text-4xl font-extrabold mb-6 text-gray-900">{t.yourTalentPage}</h1>
          {!uploadedVideo && !stream ? (
            <div className="flex flex-col items-center justify-center p-8 border-2 border-dashed border-gray-300 rounded-xl mb-6">
              <div className="flex flex-col md:flex-row space-y-4 md:space-y-0 md:space-x-4 w-full">
                <button onClick={startRecording} disabled={recording} className="flex-1 px-6 py-4 rounded-xl text-lg font-bold transition-all duration-300 bg-blue-600 hover:bg-blue-700 text-white shadow-lg">
                  {recording ? t.recordingInProgress : t.startRecording}
                </button>
                <label className="flex-1 px-6 py-4 rounded-xl text-lg font-bold transition-all duration-300 bg-gray-600 hover:bg-gray-700 text-white shadow-lg cursor-pointer">
                  {t.uploadVideo}
                  <input type="file" accept="video/*" className="hidden" onChange={handleFileUpload} />
                </label>
              </div>
              <p className="mt-4 text-sm text-gray-500">{t.uploadVideoDesc}</p>
            </div>
          ) : isSubmitted ? (
            <div className="p-8 space-y-6">
              <h2 className="text-2xl font-bold text-green-600">{t.submissionReceived}</h2>
              <p className="text-gray-700">{t.submissionReceivedMessage}</p>
              <button onClick={onBack} className="w-full px-6 py-4 rounded-xl text-lg font-bold transition-all duration-300 bg-blue-600 hover:bg-blue-700 text-white shadow-lg">
                {t.goBackToOptions}
              </button>
            </div>
          ) : (
            <div className="w-full space-y-6">
              <div className="w-full">
                {uploadedVideo && <video src={uploadedVideo} controls className="w-full h-auto rounded-xl shadow-md" />}
                {stream && <video id="talentVideoElement" autoPlay muted className="w-full h-auto rounded-xl shadow-md" />}
              </div>
              <div className="w-full">
                <textarea className="w-full p-4 border-2 border-gray-200 rounded-xl text-gray-800 focus:outline-none focus:border-blue-600 transition-colors duration-200" rows={4} placeholder={t.writeDescription} value={description} onChange={(e) => setDescription(e.target.value)} />
              </div>
              <div className="flex flex-col md:flex-row space-y-4 md:space-y-0 md:space-x-4">
                <button onClick={handleSubmit} className="flex-1 px-6 py-4 rounded-xl text-lg font-bold transition-all duration-300 bg-green-600 hover:bg-green-700 text-white shadow-lg">
                  {t.submitToReview}
                </button>
                <button onClick={handleRetake} className="flex-1 px-6 py-4 rounded-xl text-lg font-bold transition-all duration-300 bg-blue-600 hover:bg-blue-700 text-white shadow-lg">
                  {t.retakeReupload}
                </button>
              </div>
            </div>
          )}
          <Modal show={showModal} title={t.submissionReceived} message={modalMessage} onClose={() => setShowModal(false)} />
        </div>
      );
    };

    const PerformanceTest = ({ test, onComplete, onBack, inputType, initialVideoBlob, t }) => {
      const [recording, setRecording] = useState(false);
      const [processing, setProcessing] = useState(false);
      const [progress, setProgress] = useState(0);
      const [stream, setStream] = useState(null);
      const [videoBlob, setVideoBlob] = useState(initialVideoBlob || null);
      const [error, setError] = useState(null);
      const [retakeTrigger, setRetakeTrigger] = useState(0);
      useEffect(() => {
        const getCameraStream = async () => {
          try {
            setError(null);
            const newStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: false });
            setStream(newStream);
          } catch (err) {
            console.error("Error accessing the camera:", err);
            setError(t.cameraError);
          }
        };
        if (inputType === 'camera' && !videoBlob) {
          getCameraStream();
        }
        return () => {
          if (stream) {
            stream.getTracks().forEach(track => track.stop());
          }
        };
      }, [retakeTrigger, videoBlob, inputType, t.cameraError]);
      useEffect(() => {
        const videoElement = document.getElementById('videoElement');
        if (stream && videoElement) {
          videoElement.srcObject = stream;
        }
      }, [stream]);
      useEffect(() => {
        let interval;
        if (processing) {
          interval = setInterval(() => {
            setProgress((p) => {
              if (p >= 100) {
                clearInterval(interval);
                simulateAnalysisComplete();
                return 100;
              }
              return p + 10;
            });
          }, 300);
        }
        return () => clearInterval(interval);
      }, [processing]);
      const startRecording = () => {
        if (!stream) {
          setError(t.cameraError);
          return;
        }
        setRecording(true);
        const mediaRecorder = new MediaRecorder(stream);
        let chunks = [];
        mediaRecorder.ondataavailable = (e) => { chunks.push(e.data); };
        mediaRecorder.onstop = () => {
          const recordedVideoBlob = new Blob(chunks, { type: 'video/webm' });
          setVideoBlob(recordedVideoBlob);
          setRecording(false);
        };
        mediaRecorder.start();
        setTimeout(() => { if (mediaRecorder.state === 'recording') { mediaRecorder.stop(); } }, 5000);
      };
      const simulateAnalysisComplete = () => {
        setProcessing(false);
        const mockResults = {
          verticalJump: { score: "45 cm", percentile: "78%", feedback: "Good explosive power. Consider plyometrics to improve further." },
          shuttleRun: { score: "9.8 sec", percentile: "85%", feedback: "Excellent agility and quickness. Keep up the good work!" },
          sitUps: { score: "42 reps", percentile: "72%", feedback: "Strong core endurance. Focus on form to prevent injury." },
          enduranceRun: { score: "6:30 min/km", percentile: "65%", feedback: "Above average cardiovascular fitness. Add interval training for more gains." },
          basketball_dribbling: { score: "5.2 sec", percentile: "90%", feedback: "Exceptional ball control and speed. You have a natural feel for the game." },
          basketball_shooting: { score: "7/10", percentile: "82%", feedback: "Strong shooting mechanics. Focus on your follow-through for better consistency." },
          football_dribbling: { score: "6.5 sec", percentile: "75%", feedback: "Good control. Work on close-quarters dribbling to improve your game." },
          football_passing: { score: "8/10", percentile: "88%", feedback: "Excellent passing accuracy. Your vision on the field is a great asset." },
        };
        setTimeout(() => {
          const testName = t[test.id] || test.name;
          onComplete({
            test: testName,
            date: new Date().toLocaleDateString(),
            ...mockResults[test.id],
          });
        }, 0);
      };
      const renderCameraView = () => {
        if (error) {
          return (
            <div className="text-center p-4">
              <h3 className="text-lg font-semibold text-gray-800">{t.cameraNotFound}</h3>
              <p className="text-sm text-gray-500 mt-2 mb-4">{error}</p>
              <button onClick={() => setRetakeTrigger(t => t + 1)} className="px-6 py-3 rounded-xl font-bold text-lg bg-blue-600 text-white hover:bg-blue-700 transition-all duration-300">
                {t.tryAgain}
              </button>
            </div>
          );
        }
        return (
          <>
            <video id="videoElement" autoPlay muted className="rounded-lg shadow-md w-full h-auto mb-4" />
            <button onClick={startRecording} disabled={recording} className={`px-8 py-4 rounded-xl font-bold text-lg transition-all duration-300 shadow-lg ${recording ? "bg-red-600 text-white animate-pulse cursor-not-allowed" : "bg-blue-600 hover:bg-blue-700 text-white hover:shadow-xl transform hover:scale-105"}`}>
              {recording ? "Recording..." : t.startRecording}
            </button>
          </>
        );
      };
      const handleStartAnalysis = () => {
        setProcessing(true);
        setProgress(0);
      };
      const translatedTestName = t[test.id] || test.name;
      return (
        <div className="max-w-md mx-auto p-6 bg-white rounded-xl shadow-xl">
          <button onClick={onBack} className="flex items-center text-blue-600 hover:underline mb-4 text-sm font-semibold">
            ← {t.backToTestSelection}
          </button>
          <h1 className="text-4xl font-extrabold mb-4 text-center text-gray-900">{t.performanceTest(translatedTestName)}</h1>
          <p className="mb-8 text-center text-gray-600">{t[test.id + 'Desc'] || test.description}</p>
          <div className="flex flex-col items-center justify-center bg-gray-100 rounded-2xl p-8 mb-6 border border-dashed border-gray-300">
            {processing ? (
              <div className="text-center w-full">
                <p className="font-semibold mb-3 text-lg">{t.analyzingPerformance}</p>
                <div className="w-full bg-gray-200 rounded-full h-2.5">
                  <div className="bg-blue-600 h-2.5 rounded-full transition-all duration-300" style={{ width: `${progress}%` }}></div>
                </div>
                <p className="text-sm text-gray-500 mt-2">{progress}% {t.complete}</p>
              </div>
            ) : videoBlob ? (
              <div className="text-center w-full">
                <h3 className="font-semibold mb-3 text-lg">{t.reviewPerformance}</h3>
                <video src={URL.createObjectURL(videoBlob)} controls className="rounded-lg shadow-md w-full h-auto" />
                <div className="mt-4 flex space-x-4">
                  <button onClick={handleStartAnalysis} className="flex-1 px-6 py-3 rounded-xl font-bold text-lg bg-green-600 text-white hover:bg-green-700 transition-all duration-300">
                    {t.startAnalysis}
                  </button>
                  <button onClick={() => { setVideoBlob(null); setRetakeTrigger(t => t + 1); }} className="flex-1 px-6 py-3 rounded-xl font-bold text-lg text-blue-600 border border-blue-600 hover:bg-blue-100 transition-all duration-300">
                    {t.retakeReupload}
                  </button>
                </div>
              </div>
            ) : inputType === 'camera' ? (
              renderCameraView()
            ) : (
              <div className="text-center w-full">
                <h3 className="text-lg font-semibold text-gray-800">{t.videoReady}</h3>
                <p className="text-sm text-gray-500 mt-2 mb-4">{t.videoReadyDesc}</p>
                <button onClick={handleStartAnalysis} className="px-6 py-3 rounded-xl font-bold text-lg bg-green-600 text-white hover:bg-green-700 transition-all duration-300">
                  {t.startAnalysis}
                </button>
              </div>
            )}
          </div>
        </div>
      );
    };

    const ResultsPage = ({ result, onNewTest, t, db }) => {
      const [showModal, setShowModal] = useState(false);
      const [modalMessage, setModalMessage] = useState("");
      const handleSubmit = async () => {
        if (!db) {
          setModalMessage("Database not connected. Please try again later.");
          setShowModal(true);
          return;
        }
        setShowModal(true);
        setModalMessage(t.submissionMessage);
        try {
          await db.collection("test_results").add({
            test: result.test,
            score: result.score,
            percentile: result.percentile,
            feedback: result.feedback,
            date: result.date,
            timestamp: firebase.firestore.FieldValue.serverTimestamp(),
          });
          setModalMessage(t.submissionSuccess);
        } catch (e) {
          console.error("Error submitting document: ", e);
          setModalMessage("Submission failed. Please try again.");
        }
      };
      return (
        <div className="max-w-md mx-auto p-6 bg-white rounded-xl shadow-xl">
          <h1 className="text-4xl font-extrabold mb-6 text-center text-gray-900">{t.testResults}</h1>
          <div className="bg-gray-50 rounded-xl p-6 border border-gray-200">
            <p className="text-center font-bold text-2xl mb-2 text-blue-600">{result.test}</p>
            <p className="text-center text-sm text-gray-500 mb-6">{result.date}</p>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
              <div className="bg-white p-6 rounded-xl text-center shadow-md">
                <p className="text-lg text-gray-500">{t.score}</p>
                <p className="text-4xl font-extrabold text-blue-600">{result.score}</p>
              </div>
              <div className="bg-white p-6 rounded-xl text-center shadow-md">
                <p className="text-lg text-gray-500">{t.percentile}</p>
                <p className="text-4xl font-extrabold text-blue-600">{result.percentile}</p>
              </div>
            </div>
            <div className="bg-blue-50 p-6 rounded-xl border-l-4 border-blue-400">
              <p className="font-semibold mb-2 text-gray-800">{t.aiFeedback}</p>
              <p className="text-gray-700 italic">{result.feedback}</p>
            </div>
            <div className="mt-8 space-y-4">
              <button onClick={handleSubmit} className="w-full bg-green-600 text-white py-4 rounded-xl font-bold text-lg hover:bg-green-700 transition-all duration-300 shadow-lg">
                {t.submit}
              </button>
              <button onClick={onNewTest} className="w-full text-blue-600 py-2 rounded-xl font-semibold text-lg hover:underline transition-all duration-300">
                {t.newTest}
              </button>
            </div>
          </div>
          <Modal show={showModal} title={t.submissionReceived} message={modalMessage} onClose={() => setShowModal(false)} />
        </div>
      );
    };

    const App = () => {
      const [page, setPage] = useState("home");
      const [language, setLanguage] = useState('en');
      const [selectedTest, setSelectedTest] = useState(null);
      const [result, setResult] = useState(null);
      const [inputType, setInputType] = useState('camera');
      const [uploadedFile, setUploadedFile] = useState(undefined);
      const [isMenuOpen, setIsMenuOpen] = useState(false);
      const [isOptionsBarOpen, setIsOptionsBarOpen] = useState(false);
      const [isLanguageBarOpen, setIsLanguageBarOpen] = useState(false);
      const [selectedSport, setSelectedSport] = useState(null);
      const [db, setDb] = useState(null);
      const [auth, setAuth] = useState(null);
      
      useEffect(() => {
        try {
          const firebaseConfig = JSON.parse(typeof __firebase_config !== 'undefined' ? __firebase_config : '{}');
          if (Object.keys(firebaseConfig).length > 0) {
            const app = firebase.initializeApp(firebaseConfig);
            const firestoreDb = firebase.firestore();
            const firebaseAuth = firebase.auth();
            setDb(firestoreDb);
            setAuth(firebaseAuth);
            const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;
            if (initialAuthToken) {
              firebaseAuth.signInWithCustomToken(initialAuthToken)
                .then(() => console.log("Signed in with custom token successfully!"))
                .catch(console.error);
            } else {
              firebaseAuth.signInAnonymously()
                .then(() => console.log("Signed in anonymously successfully!"))
                .catch(console.error);
            }
          }
        } catch (e) {
          console.error("Firebase initialization failed:", e);
        }
      }, []);

      const t = translations[language];
      const handleStartTest = (test, type, file) => {
        setSelectedTest(test);
        setInputType(type);
        if (type === 'file' && file) {
          setUploadedFile(file);
        }
        setPage("performance");
      };
      const handleCompleteTest = (res) => {
        setResult(res);
        setPage("results");
      };
      const handleNewTest = () => {
        setSelectedTest(null);
        setResult(null);
        setUploadedFile(undefined);
        setSelectedSport(null);
        setPage("home");
      };
      const handleLanguageSelect = (lang) => {
        setLanguage(lang);
        setIsLanguageBarOpen(false);
        setPage('home');
      };
      const renderPage = () => {
        switch (page) {
          case 'home':
            return <HomePage onBack={() => setPage('home')} t={t} />;
          case 'login':
            return <LoginPage onBack={() => setPage('home')} t={t} />;
          case 'leaderboard':
            return <LeaderboardPage onBack={() => setPage('home')} t={t} />;
          case 'tournament':
            return <TournamentPage onBack={() => setPage('home')} t={t} />;
          case 'testSelection':
            return <TestSelection onStartTest={handleStartTest} onBack={() => setPage('home')} t={t} />;
          case 'sportSelection':
            return <SportTypeSelectionPage onSelectSport={(sport) => { setSelectedSport(sport); setPage('qualitySelection'); }} onBack={() => setPage('home')} t={t} />;
          case 'qualitySelection':
            return selectedSport && (
              <QualitySelectionPage sportId={selectedSport} onStartTest={handleStartTest} onBack={() => setPage('sportSelection')} t={t} />
            );
          case 'performance':
            return selectedTest && (
              <PerformanceTest test={selectedTest} onComplete={handleCompleteTest} onBack={() => setPage('testSelection')} inputType={inputType} initialVideoBlob={uploadedFile} t={t} />
            );
          case 'results':
            return result && (
              <ResultsPage result={result} onNewTest={handleNewTest} t={t} db={db} />
            );
          case 'menu':
            return null;
          case 'contact':
            return <ContactPage onBack={() => setIsMenuOpen(true)} t={t} />;
          case 'support':
            return <SupportPage onBack={() => setIsMenuOpen(true)} t={t} />;
          case 'yourTalent':
            return <YourTalentPage onBack={() => setIsOptionsBarOpen(true)} t={t} db={db} />;
          default:
            return null;
        }
      };
      return (
        <div className={`min-h-screen bg-gray-100 pb-20 flex items-center justify-center ${FONT_CLASS}`}>
          <div className="container mx-auto">
            {renderPage()}
          </div>
          <div className="fixed bottom-0 left-0 w-full bg-white border-t border-gray-200 shadow-lg">
            <div className="flex justify-around items-center h-16 max-w-lg mx-auto">
              <button onClick={() => setPage('home')} className={`flex-1 flex flex-col items-center justify-center text-sm font-semibold py-2 transition-colors duration-200 ${page === 'home' ? 'text-blue-600' : 'text-gray-500 hover:text-blue-600'}`}>
                <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 mb-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 001 1h3M21 12v10a1 1 00-1-1h-3m-6 0h-2M9 21v-8a1 1 0 011-1h4a1 1 0 011 1v8m-6 0h-2M9 21v-8a1 1 0 011-1h4a1 1 0 011 1v8" />
                </svg>
                <span>{t.home}</span>
              </button>
              <button onClick={() => setIsOptionsBarOpen(true)} className={`flex-1 flex flex-col items-center justify-center text-sm font-semibold py-2 transition-colors duration-200 ${isOptionsBarOpen || page === 'testSelection' || page === 'performance' || page === 'results' || page === 'sportType' || page === 'yourTalent' ? 'text-blue-600' : 'text-gray-500 hover:text-blue-600'}`}>
                <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 mb-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2-2a4 4 0 11-8 0 4 4 0 018 0z" />
                </svg>
                <span>{t.options}</span>
              </button>
              <button onClick={() => setPage('leaderboard')} className={`flex-1 flex flex-col items-center justify-center text-sm font-semibold py-2 transition-colors duration-200 ${page === 'leaderboard' ? 'text-blue-600' : 'text-gray-500 hover:text-blue-600'}`}>
                <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 mb-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4.354a4 4 0 100 5.292m0-5.292a4 4 0 110 5.292m0 5.292a4 4 0 100 5.292m0-5.292a4 4 0 110 5.292m0 0a4 4 0 100 5.292m-5.657 1.414a4 4 0 100 5.292" />
                </svg>
                <span>{t.leaderboard}</span>
              </button>
              <button onClick={() => setPage('tournament')} className={`flex-1 flex flex-col items-center justify-center text-sm font-semibold py-2 transition-colors duration-200 ${page === 'tournament' ? 'text-blue-600' : 'text-gray-500 hover:text-blue-600'}`}>
                <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 mb-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 14v6m-3-3h6M6 14v6m-3-3h6M11 11V3a2 2 0 00-2-2m-2 4h4m-4 4V7m2 2h-4" />
                </svg>
                <span>{t.tournament}</span>
              </button>
              <button onClick={() => setIsMenuOpen(true)} className={`flex-1 flex flex-col items-center justify-center text-sm font-semibold py-2 transition-colors duration-200 ${isMenuOpen ? 'text-blue-600' : 'text-gray-500 hover:text-blue-600'}`}>
                <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 mb-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6h16M4 12h16M4 18h16" />
                </svg>
                <span>{t.menu}</span>
              </button>
            </div>
          </div>
          <Menu isOpen={isMenuOpen} onClose={() => setIsMenuOpen(false)} onSelectOption={(option) => { setPage(option); setIsMenuOpen(false); }} onOpenLanguageBar={() => { setIsLanguageBarOpen(true); setIsMenuOpen(false); }} onOpenLoginPage={() => { setPage('login'); setIsMenuOpen(false); }} t={t} />
          <LanguageBar isOpen={isLanguageBarOpen} onClose={() => setIsLanguageBarOpen(false)} onSelectLanguage={handleLanguageSelect} t={t} />
          <OptionsBar isOpen={isOptionsBarOpen} onClose={() => setIsOptionsBarOpen(false)} onSelectOption={(option) => { setPage(option === 'testSelection' ? 'testSelection' : option === 'sportType' ? 'sportSelection' : 'yourTalent'); setIsOptionsBarOpen(false); }} t={t} />
        </div>
      );
    };

    ReactDOM.render(<App />, document.getElementById('root'));
  </script>
</body>
</html>
